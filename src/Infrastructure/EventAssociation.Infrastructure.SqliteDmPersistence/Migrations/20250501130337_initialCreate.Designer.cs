// <auto-generated />
using System;
using System.Collections.Generic;
using EventAssociation.Infrastructure.SqliteDmPersistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventAssociation.Infrastructure.SqliteDmPersistence.Migrations
{
    [DbContext(typeof(DmContext))]
    [Migration("20250501130337_initialCreate")]
    partial class initialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("EventAssociation.Core.Domain.Aggregates.Event.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventAssociation.Core.Domain.Aggregates.Guests.Guest", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("email", "EventAssociation.Core.Domain.Aggregates.Guests.Guest.email#GuestVIAEmail", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("image", "EventAssociation.Core.Domain.Aggregates.Guests.Guest.image#GuestImageUrl", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("image");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("name", "EventAssociation.Core.Domain.Aggregates.Guests.Guest.name#GuestName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("firstName")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("firstName");

                            b1.Property<string>("lastName")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("lastName");
                        });

                    b.HasKey("id");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("EventAssociation.Core.Domain.Aggregates.Locations.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("LocationCapacity", "EventAssociation.Core.Domain.Aggregates.Locations.Location.LocationCapacity#LocationCapacity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("INTEGER")
                                .HasColumnName("LocationCapacity");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("LocationName", "EventAssociation.Core.Domain.Aggregates.Locations.Location.LocationName#LocationName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("LocationName");
                        });

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("EventAssociation.Core.Domain.Aggregates.Event.Event", b =>
                {
                    b.HasOne("EventAssociation.Core.Domain.Aggregates.Locations.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });
#pragma warning restore 612, 618
        }
    }
}
